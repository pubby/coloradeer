MEMORY {
    ZP:       start = $20, size = $E0, type = rw;
    HEADER:   start = $0, size = $10, file = %O, fill = yes, fillval = $00;
    RAM:      start = $0300, size = $0500, type = rw;

    # UNROM 128K
    PRG0:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F0, bank=0;
    PRG1:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F1, bank=1;
    PRG2:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F2, bank=2;
    PRG3:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F3, bank=3;
    PRG4:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F4, bank=4;
    PRG5:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F5, bank=5;
    PRG6:     start = $8000, size = $4000, file = %O, fill = yes, fillval = $F6, bank=6;
    PRG7:     start = $C000, size = $4000, file = %O, fill = yes, fillval = $F7;
}

SEGMENTS {
    INESHDR:  load = HEADER, type = ro, align = $10;
    ZEROPAGE: load = ZP, type = zp;
    BSS:      load = RAM, type = bss, define = yes, align = $100;

    ROM0:     load = PRG0, type = ro, align = $100, optional = yes;
    ROM1:     load = PRG1, type = ro, align = $100, optional = yes;
    ROM2:     load = PRG2, type = ro, align = $100, optional = yes;
    ROM3:     load = PRG3, type = ro, align = $100, optional = yes;
    ROM4:     load = PRG4, type = ro, align = $100, optional = yes;
    ROM5:     load = PRG5, type = ro, align = $100, optional = yes;
    ROM6:     load = PRG6, type = ro, align = $100, optional = yes;
    CODE:     load = PRG7, type = ro, align = $100;
    RODATA:   load = PRG7, type = ro, align = $100;
    VECTORS:  load = PRG7, type = ro, start = $FFFA;
}

FILES {
    %O: format = bin;
}

